export const dynamic = 'force-dynamic';
'use client';

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useSearchParams } from 'next/navigation';
import FullResults from '@/components/FullResults';
import { AnalysisResult, AmazonAdData, AnalyzedKeyword } from '@/types';
import Link from 'next/link';

// Helper function to calculate profit-optimized bid
const calculateProfitOptimizedBid = (item: AnalyzedKeyword, royalty: number | null): number | null => {
  if (royalty === null || royalty <= 0) return null;
  
  const clicks = item.clicks || 0;
  const orders = item.orders || 0;
  const kenpRoyalty = item.estimatedKenpRoyalties || 0;

  if (clicks === 0) return null; // no data to base calculation on

  /*
    Bayesian‑smoothed CVR to avoid extreme values with very low data.
    We use a Beta prior that assumes ~3 % baseline CVR based on industry averages
    and contributes the equivalent of 20 pseudo‑clicks.
  */
  const PRIOR_CLICKS = 20;
  const BASELINE_CVR = 0.03; // 3 %
  const priorOrders = PRIOR_CLICKS * BASELINE_CVR;

  const smoothedCvr = (orders + priorOrders) / (clicks + PRIOR_CLICKS);

  // Royalty generated by KENP per click (smoothed by dividing by real clicks only)
  const kenpRoyaltyPerClick = kenpRoyalty / clicks;

  // Expected total royalty per click
  const expectedRoyaltyPerClick = smoothedCvr * royalty + kenpRoyaltyPerClick;

  // Safety margin: bid at 90 % of expected value → leaves ~10 % profit buffer
  const rawBid = expectedRoyaltyPerClick * 0.9;

  const bid = Math.max(0.02, parseFloat(rawBid.toFixed(2)));

  // Only suggest profit-optimized bid if it increases beyond current bid
  if (item.keywordBid !== undefined && item.keywordBid !== null && bid > item.keywordBid) {
    // Cap: avoid >3× increase when clicks <20, else up to 5×
    const maxMultiplier = clicks < 20 ? 3 : 5;
    const maxAllowedBid = item.keywordBid * maxMultiplier;
    return Math.min(bid, maxAllowedBid);
  }
  return null;  // fallback to newBid for decreases
};

// NEW: Helper to recalculate optimization potential based on updated bids
const recalculateNetOptimizationPotential = (
  analyzedKeywords: AnalyzedKeyword[], 
  originalWastedSpend: number,
  royaltyPerSale: number | null // Pass royalty here
): number => {
  let potentialSavings = originalWastedSpend; // Start with savings from pausing hopeless keywords
  let estimatedGain = 0;

  // Constants from analysis.ts and calculateProfitOptimizedBid (consider centralizing)
  const TARGET_ACOS_FOR_BOOST = 0.7;
  const BASE_GAIN_PERCENTAGE  = 0.08;
  const SENSITIVITY_FACTOR    = 0.15;
  const PRIOR_CLICKS = 20;
  const BASELINE_CVR = 0.03; // 3 %
  const priorOrders = PRIOR_CLICKS * BASELINE_CVR;
  const MIN_BID = 0.05; // Keep for savings calculation reference if needed

  analyzedKeywords.forEach(item => {
    const currentBid = item.keywordBid;
    const ruleBasedNewBid = item.newBid;
    const profitOptBid = item.profitOptimizedBid;
    const isHopeless = item.recommendation?.startsWith('Pause');
    const clicks = item.clicks || 0;
    const orders = item.orders || 0;
    const kenpRoyalty = item.estimatedKenpRoyalties || 0;

    // --- Savings Calculation (Unaffected by Royalty) ---
    if (currentBid && ruleBasedNewBid && ruleBasedNewBid < currentBid && !isHopeless) {
      const saving = (item.spend || 0) * (1 - (ruleBasedNewBid / currentBid));
      if (saving > 0) {
          potentialSavings += saving;
      }
    }

    // --- Gain Calculation (Affected by Royalty) ---
    const canUseProfitOptBid = royaltyPerSale !== null && profitOptBid != null && profitOptBid > (currentBid || 0);

    if (canUseProfitOptBid && clicks > 0) {
      // Calculate expected gain using profit-optimized bid
      const smoothedCvr = (orders + priorOrders) / (clicks + PRIOR_CLICKS);
      const kenpRoyaltyPerClick = kenpRoyalty / clicks;
      const expectedRoyaltyPerClick = smoothedCvr * royaltyPerSale + kenpRoyaltyPerClick;
      
      // Ensure profitOptBid is a valid number before using it
      if (typeof profitOptBid === 'number') { 
        const profitMarginPerClick = expectedRoyaltyPerClick - profitOptBid;
        
        // Only add gain if the expected margin is positive
        if (profitMarginPerClick > 0) {
           // Simple estimation: Apply margin to current click volume
           estimatedGain += profitMarginPerClick * clicks;
        }
      }
      
    } else if (
      // Fallback to original gain logic if profit opt bid not applicable but original was boost
      item.recommendation?.startsWith('Boost') && 
      typeof item.effectiveAcos === 'number' && 
      item.effectiveAcos < TARGET_ACOS_FOR_BOOST
    ) {
        const revenue = item.estimatedTotalRoyalty || 0;
        const effAcos = item.effectiveAcos; // Now guaranteed to be a number
        const headroom = Math.max(0, TARGET_ACOS_FOR_BOOST - effAcos);
        const gainPercentage = BASE_GAIN_PERCENTAGE + headroom * SENSITIVITY_FACTOR;
        estimatedGain += revenue * gainPercentage;
    }
  });

  return potentialSavings + estimatedGain;
};

export default function ResultsPage() {
  const searchParams = useSearchParams();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isPaid, setIsPaid] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [royaltyPerSale, setRoyaltyPerSale] = useState<number | null>(null);
  const [royaltyInput, setRoyaltyInput] = useState<string>('');

  // Load royalty from localStorage on mount
  useEffect(() => {
    const storedRoyalty = localStorage.getItem('userRoyaltyPerSale');
    if (storedRoyalty) {
      const parsedRoyalty = parseFloat(storedRoyalty);
      if (!isNaN(parsedRoyalty) && parsedRoyalty > 0) {
        setRoyaltyPerSale(parsedRoyalty);
        setRoyaltyInput(parsedRoyalty.toString());
      }
    }
  }, []);

  // Main effect to load analysis data
  useEffect(() => {
    const sessionId = searchParams.get('session_id');
    if (!sessionId) {
      const storedAnalysis = sessionStorage.getItem('analysisResult');
      if (storedAnalysis) {
        try {
          setAnalysisResult(JSON.parse(storedAnalysis));
          setIsPaid(true);
          setIsLoading(false);
        } catch (err) {
          setError('Failed to load analysis results.');
          setIsLoading(false);
        }
      } else {
        setError('No analysis results found. Please upload your CSV file first.');
        setIsLoading(false);
      }
      return;
    }

    const verifyPayment = async () => {
      try {
        const response = await fetch(`/api/payment/verify?session_id=${sessionId}`);
        if (!response.ok) throw new Error('Payment verification failed');
        const result = await response.json();
        if (result.paid) {
          setIsPaid(true);
          const storedAnalysis = sessionStorage.getItem('analysisResult');
          if (storedAnalysis) {
            setAnalysisResult(JSON.parse(storedAnalysis));
          } else {
            setError('Analysis results not found. Please try uploading your CSV again.');
          }
        } else {
          setError('Payment has not been completed.');
        }
      } catch (err) {
        console.error('Payment verification error:', err);
        setError('An error occurred while verifying payment.');
      } finally {
        setIsLoading(false);
      }
    };
    verifyPayment();
  }, [searchParams]);

  const handleRoyaltySave = useCallback(() => {
    const newRoyalty = parseFloat(royaltyInput);
    if (!isNaN(newRoyalty) && newRoyalty > 0) {
      setRoyaltyPerSale(newRoyalty);
      localStorage.setItem('userRoyaltyPerSale', newRoyalty.toString());
    } else {
      alert('Please enter a valid positive number for royalty.');
    }
  }, [royaltyInput]);

  // Memoize the analysis result with calculated profit bids AND recalculated potential
  const analysisResultWithProfitBids = useMemo(() => {
    if (!analysisResult) return null;
    
    // Deep copy to avoid modifying the original state
    const updatedResult = JSON.parse(JSON.stringify(analysisResult));
    
    // Calculate profit-optimized bids for each keyword
    const keywordsWithProfitBids = updatedResult.fullAnalysis.data.map((item: AnalyzedKeyword) => ({
      ...item,
      profitOptimizedBid: calculateProfitOptimizedBid(item, royaltyPerSale)
    }));
    
    // Recalculate net potential based on potentially updated bids
    const newNetPotential = recalculateNetOptimizationPotential(
      keywordsWithProfitBids, 
      analysisResult.painPoints.wastedSpend, // Pass original wasted spend
      royaltyPerSale // Pass the current royalty
    );

    // Update the result object
    updatedResult.fullAnalysis.data = keywordsWithProfitBids;
    (updatedResult.fullAnalysis as any).netOptimizationPotential = newNetPotential;
    
    return updatedResult;
  }, [analysisResult, royaltyPerSale]);

  return (
    <div className="min-h-screen">
      <div className="max-w-[95%] mx-auto px-4 sm:px-6 lg:px-8 py-16">
        {isPaid ? (
          <div className="text-center mb-16">
            <h1 className="text-4xl sm:text-5xl lg:text-6xl font-extrabold tracking-tight bg-gradient-to-r from-white via-indigo-200 to-fuchsia-200 bg-clip-text text-transparent drop-shadow-lg">
              Your Complete Analysis Results
            </h1>
            <p className="mt-4 max-w-3xl mx-auto text-xl text-slate-300/80">
              Smart recommendations to boost your KDP ad performance and increase profits
            </p>
          </div>
        ) : (
          <div className="text-center mb-16">
            <h1 className="text-4xl sm:text-5xl lg:text-6xl font-extrabold tracking-tight bg-gradient-to-r from-white via-indigo-200 to-fuchsia-200 bg-clip-text text-transparent drop-shadow-lg">
              Analysis Results
            </h1>
          </div>
        )}
        
        {error && (
          <div className="rounded-md bg-red-900/50 border border-red-500/50 p-5 mb-8 max-w-3xl mx-auto">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-6 w-6 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
              </div>
              <div className="ml-4">
                <h3 className="text-lg font-semibold text-red-300">Error</h3>
                <div className="mt-2 text-base text-red-200">
                  <p>{error}</p>
                </div>
                <div className="mt-5">
                  <Link
                    href="/upload"
                    className="inline-flex items-center px-5 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gradient-to-r from-fuchsia-500 via-indigo-500 to-blue-500 hover:scale-105 transition-transform focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 focus:ring-offset-slate-900"
                  >
                    Back to Upload
                  </Link>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {isLoading && (
          <div className="fixed inset-0 bg-black/70 flex flex-col items-center justify-center z-50 backdrop-blur-sm">
            <div className="animate-spin rounded-full h-16 w-16 border-4 border-indigo-400 border-t-transparent mb-4"></div>
            <p className="text-xl text-slate-200 font-semibold">{isPaid ? 'Loading results...' : 'Verifying payment...'}</p>
          </div>
        )}
        
        {!isLoading && !error && isPaid && (
          <div className="bg-gradient-to-br from-indigo-900/80 to-purple-900/80 shadow-xl rounded-2xl p-6 md:p-8 mb-10 max-w-lg mx-auto border border-indigo-500/50 relative overflow-hidden">
            {/* Decorative element */}
            <div className="absolute top-0 right-0 -mt-4 -mr-4 w-24 h-24 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full opacity-30 blur-xl"></div>
            
            <div className="bg-gradient-to-r from-amber-400 to-orange-500 text-amber-900 px-4 py-2 rounded-lg text-sm font-bold mb-4 inline-block">
              IMPORTANT STEP
            </div>
            
            <h3 className="text-2xl font-bold text-white mb-3 flex items-center">
              <svg className="w-6 h-6 mr-2 text-indigo-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
              </svg>
              Maximize Your Profit
            </h3>
            
            <p className="text-indigo-200 mb-5 text-base">
              Enter your average book royalty to unlock <span className="font-bold text-white">profit-optimized bids</span> that maximize your actual earnings, not just sales.
            </p>
            
            <div className="flex flex-col space-y-4">
              <div className="bg-indigo-900/50 p-4 rounded-lg border border-indigo-700/50">
                <p className="text-sm text-indigo-300 mb-2 flex items-center">
                  <svg className="w-4 h-4 mr-1 text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  Your average royalty per book sale after Amazon fees
                </p>
                <div className="flex items-center space-x-3">
                  <div className="relative rounded-md shadow-sm flex-grow">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <span className="text-slate-400 sm:text-sm">$</span>
                    </div>
                    <input
                      type="number"
                      name="royalty"
                      id="royalty"
                      className="block w-full pl-7 pr-4 py-3 sm:text-sm rounded-md bg-slate-800 border border-indigo-500/50 text-slate-100 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-150 ease-in-out"
                      placeholder="e.g., 4.50"
                      value={royaltyInput}
                      onChange={(e) => setRoyaltyInput(e.target.value)}
                      min="0.01"
                      step="0.01"
                    />
                  </div>
                  <button
                    onClick={handleRoyaltySave}
                    className="inline-flex items-center px-5 py-3 border border-transparent text-sm font-medium rounded-md shadow-lg text-white bg-gradient-to-r from-indigo-500 to-blue-500 hover:from-indigo-600 hover:to-blue-600 hover:scale-105 transition-all focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 focus:ring-offset-slate-900"
                  >
                    Save
                  </button>
                </div>
              </div>
              
              {royaltyPerSale !== null ? (
                <div className="bg-green-900/30 border border-green-500/30 rounded-lg p-3 flex items-center">
                  <svg className="h-5 w-5 text-green-400 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <p className="text-sm text-green-300">
                    <span className="font-medium">Success!</span> Royalty set to ${royaltyPerSale.toFixed(2)}. Your bids are now optimized for maximum profit.
                  </p>
                </div>
              ) : (
                <div className="bg-amber-900/30 border border-amber-500/30 rounded-lg p-3 flex items-center">
                  <svg className="h-5 w-5 text-amber-400 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                  <p className="text-sm text-amber-300">
                    Please enter your royalty to see profit-optimized bid recommendations.
                  </p>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Display Full Results - Ensure the container allows full width */}
        {!isLoading && !error && isPaid && analysisResultWithProfitBids && (
          <div className="w-full overflow-hidden">
            <FullResults 
              analysisResult={analysisResultWithProfitBids} 
              isProfitOptimized={royaltyPerSale !== null}
            />
          </div>
        )}
        
        {!isLoading && !error && !isPaid && (
          <div className="bg-yellow-900/50 shadow-lg rounded-xl overflow-hidden border border-yellow-500/30 max-w-2xl mx-auto">
             <div className="px-6 py-5 border-b border-yellow-500/30">
               <h3 className="text-lg font-medium text-yellow-200">Payment Required</h3>
              <p className="mt-1 text-sm text-yellow-300/80">
                 Please complete the payment to view your full analysis results.
              </p>
            </div>
            <div className="px-6 py-6 text-center">
              <p className="text-slate-300 mb-5">
                Your payment has not been completed or verified. Please return to the upload page to try again.
              </p>
              <Link
                 href="/upload"
                 className="inline-flex items-center px-5 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gradient-to-r from-fuchsia-500 via-indigo-500 to-blue-500 hover:scale-105 transition-transform focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 focus:ring-offset-slate-900"
              >
                Back to Upload
              </Link>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
